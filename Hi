#include <stdio.h>
#include <pthread.h>

#define N 5 // Number of diners the restaurant can hold

// Initialize semaphores and counters
sem_t entering_diners, exiting_diners, enter_done, exit_done;
sem_t mutex_enter, mutex_exit;
int count_enter = 0, count_exit = 0;

// Function prototypes
void *restaurant_thread(void *arg);
void *diner_thread(void *arg);
void openFrontDoor();
void closeFrontDoor();
void serveFood();
void openBackDoor();
void closeBackDoor();
void enterRestaurant();
void eat();
void exitRestaurant();

int main() {
    // Initialize semaphores
    sem_init(&entering_diners, 0, 0);
    sem_init(&exiting_diners, 0, 0);
    sem_init(&enter_done, 0, 0);
    sem_init(&exit_done, 0, 0);
    sem_init(&mutex_enter, 0, 1);
    sem_init(&mutex_exit, 0, 1);

    // Create restaurant thread
    pthread_t restaurant;
    pthread_create(&restaurant, NULL, restaurant_thread, NULL);

    // Create diner threads
    pthread_t diner_threads[10]; // Let's simulate 10 diners
    for (int i = 0; i < 10; i++) {
        pthread_create(&diner_threads[i], NULL, diner_thread, NULL);
    }

    // Join all threads
    pthread_join(restaurant, NULL);
    for (int i = 0; i < 10; i++) {
        pthread_join(diner_threads[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&entering_diners);
    sem_destroy(&exiting_diners);
    sem_destroy(&enter_done);
    sem_destroy(&exit_done);
    sem_destroy(&mutex_enter);
    sem_destroy(&mutex_exit);

    return 0;
}

// Restaurant Thread
void *restaurant_thread(void *arg) {
    while (1) {
        // Open front door
        openFrontDoor();

        // Signal N diners to enter
        for (int i = 0; i < N; i++) {
            sem_post(&entering_diners);
        }

        // Wait for all diners to enter
        for (int i = 0; i < N; i++) {
            sem_wait(&enter_done);
        }

        // Close front door
        closeFrontDoor();

        // Serve food
        serveFood();

        // Open back door
        openBackDoor();

        // Signal N diners to exit
        for (int i = 0; i < N; i++) {
            sem_post(&exiting_diners);
        }

        // Wait for all diners to exit
        for (int i = 0; i < N; i++) {
            sem_wait(&exit_done);
        }

        // Close back door
        closeBackDoor();
    }
}

// Diner Thread
void *diner_thread(void *arg) {
    // Wait for the front door to open
    sem_wait(&entering_diners);

    // Enter the restaurant
    enterRestaurant();

    // Acquire mutex to update count_enter
    sem_wait(&mutex_enter);
    count_enter++;
    if (count_enter == N) {
        sem_post(&enter_done);
        count_enter = 0;
    }
    sem_post(&mutex_enter);

    // Eat
    eat();

    // Wait for the back door to open
    sem_wait(&exiting_diners);

    // Exit the restaurant
    exitRestaurant();

    // Acquire mutex to update count_exit
    sem_wait(&mutex_exit);
    count_exit++;
    if (count_exit == N) {
        sem_post(&exit_done);
        count_exit = 0;
    }
    sem_post(&mutex_exit);

    return NULL;
}

// Functions representing restaurant actions
void openFrontDoor() {
    printf("Front door opened\n");
}

void closeFrontDoor() {
    printf("Front door closed\n");
}

void serveFood() {
    printf("Food served\n");
}

void openBackDoor() {
    printf("Back door opened\n");
}

void closeBackDoor() {
    printf("Back door closed\n");
}

// Functions representing diner actions
void enterRestaurant() {
    printf("Diner entered restaurant\n");
}

void eat() {
    printf("Diner is eating\n");
}

void exitRestaurant() {
    printf("Diner exited restaurant\n");
}
